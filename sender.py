import os
import subprocess
import sys
from rich.console import Console
from rich.panel import Panel
from rich.box import ROUNDED
from rich.prompt import Prompt

# Configura√ß√µes
console = Console()

# Arte ASCII para "Install Packages"
INSTALL_PACKAGES_ASCII = """
[bold rgb(0,255,255)]
‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà       ‚ñà‚ñà      ‚ñà‚ñà      
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà           ‚ñà‚ñà 
‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
[/bold rgb(0,255,255)]
"""

# Lista de pacotes necess√°rios
REQUIRED_PACKAGES = ["requests", "rich", "datetime"]

def install_packages():
    """Verifica e instala os pacotes necess√°rios."""
    console.print(Panel.fit(INSTALL_PACKAGES_ASCII, title="Install Packages", box=ROUNDED))
    console.print("[bold cyan]üîç Checking required packages...[/bold cyan]")
    
    for package in REQUIRED_PACKAGES:
        try:
            __import__(package)
            console.print(f"[green]‚úì {package} is already installed.[/green]")
        except ImportError:
            console.print(f"[yellow]‚ö† {package} not found. Installing...[/yellow]")
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])
            console.print(f"[green]‚úì {package} installed successfully![/green]")
    
    console.print("\n[bold green]‚úÖ All packages are ready![/bold green]")
    console.print(Panel.fit("[bold]Press [Enter] to continue...[/bold]", box=ROUNDED))
    input()

# Verifica e instala os pacotes antes de iniciar o programa
install_packages()

# Resto do seu c√≥digo (o original)
import requests
from datetime import datetime
from rich.table import Table

# Configura√ß√µes
LOG_FILE = "upload_log.txt"

# Arte ASCII menor para "AUploader"
AUPLOADER_ASCII = """
[bold rgb(0,255,255)]
 ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  
‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà   ‚ñà‚ñà 
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  
‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà   ‚ñà‚ñà 
‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà 
[/bold rgb(0,255,255)]
"""

# Mensagem "By Alex Lseything"
BY_MESSAGE = "[bold rgb(255,255,0)]Test Release By Alex Lseything[/bold rgb(255,255,0)]"

# Dicion√°rio de idiomas
LANGUAGES = {
    "English": {
        "welcome": "Welcome to AUploader!",
        "upload_success": "‚úì Upload complete! Download link:",
        "file_not_found": "‚úó File not found.",
        "upload_error": "‚úó An error occurred during upload:",
        "history_title": "üìÑ Upload History",
        "no_records": "No records found.",
        "history_cleared": "‚úì Upload history cleared successfully!",
        "menu_title": "üöÄ File Upload Menu",
        "menu_options": ["Upload a file", "View upload history", "Clear history", "Exit"],
        "enter_file_path": "üìÇ Enter the file path",
        "press_enter": "Press [Enter] to return to the menu",
        "exiting": "üöÄ Exiting... Goodbye!",
    },
    "Portuguese": {
        "welcome": "Bem-vindo ao AUploader!",
        "upload_success": "‚úì Upload conclu√≠do! Link de download:",
        "file_not_found": "‚úó Arquivo n√£o encontrado.",
        "upload_error": "‚úó Ocorreu um erro durante o upload:",
        "history_title": "üìÑ Hist√≥rico de Uploads",
        "no_records": "Nenhum registro encontrado.",
        "history_cleared": "‚úì Hist√≥rico de uploads limpo com sucesso!",
        "menu_title": "üöÄ Menu de Upload de Arquivos",
        "menu_options": ["Fazer upload de um arquivo", "Ver hist√≥rico de uploads", "Limpar hist√≥rico", "Sair"],
        "enter_file_path": "üìÇ Digite o caminho do arquivo",
        "press_enter": "Pressione [Enter] para voltar ao menu",
        "exiting": "üöÄ Saindo... Adeus!",
    },
    "Spanish": {
        "welcome": "¬°Bienvenido a AUploader!",
        "upload_success": "‚úì ¬°Subida completada! Enlace de descarga:",
        "file_not_found": "‚úó Archivo no encontrado.",
        "upload_error": "‚úó Ocurri√≥ un error durante la subida:",
        "history_title": "üìÑ Historial de Subidas",
        "no_records": "No se encontraron registros.",
        "history_cleared": "‚úì ¬°Historial de subidas borrado con √©xito!",
        "menu_title": "üöÄ Men√∫ de Subida de Archivos",
        "menu_options": ["Subir un archivo", "Ver historial de subidas", "Borrar historial", "Salir"],
        "enter_file_path": "üìÇ Ingrese la ruta del archivo",
        "press_enter": "Presione [Enter] para volver al men√∫",
        "exiting": "üöÄ Saliendo... ¬°Adi√≥s!",
    },
    "Russian": {
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AUploader!",
        "upload_success": "‚úì –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
        "file_not_found": "‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "upload_error": "‚úó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:",
        "history_title": "üìÑ –ò—Å—Ç–æ—Ä–∏—è –ó–∞–≥—Ä—É–∑–æ–∫",
        "no_records": "–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
        "history_cleared": "‚úì –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!",
        "menu_title": "üöÄ –ú–µ–Ω—é –ó–∞–≥—Ä—É–∑–∫–∏ –§–∞–π–ª–æ–≤",
        "menu_options": ["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫", "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "–í—ã—Ö–æ–¥"],
        "enter_file_path": "üìÇ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É",
        "press_enter": "–ù–∞–∂–º–∏—Ç–µ [Enter], —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
        "exiting": "üöÄ –í—ã—Ö–æ–¥... –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
    },
    "Ukrainian": {
        "welcome": "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ AUploader!",
        "upload_success": "‚úì –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:",
        "file_not_found": "‚úó –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
        "upload_error": "‚úó –ü—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞:",
        "history_title": "üìÑ –Ü—Å—Ç–æ—Ä—ñ—è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å",
        "no_records": "–ó–∞–ø–∏—Å–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
        "history_cleared": "‚úì –Ü—Å—Ç–æ—Ä—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ!",
        "menu_title": "üöÄ –ú–µ–Ω—é –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –§–∞–π–ª—ñ–≤",
        "menu_options": ["–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å", "–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", "–í–∏–π—Ç–∏"],
        "enter_file_path": "üìÇ –í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É",
        "press_enter": "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å [Enter], —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é",
        "exiting": "üöÄ –í–∏—Ö–æ–¥–∂—É... –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!",
    },
}

def upload_file(file_path, language):
    """Faz o upload do arquivo para o GoFile."""
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(LANGUAGES[language]["file_not_found"])
        
        url = "https://store1.gofile.io/uploadFile"
        with open(file_path, "rb") as file:
            response = requests.post(url, files={"file": file})
        
        if response.status_code == 200:
            download_link = response.json()["data"]["downloadPage"]
            console.print(Panel.fit(
                f"[green]{LANGUAGES[language]['upload_success']}[/green]\n[blue]{download_link}[/blue]",
                title="Success", box=ROUNDED
            ))
            
            log_entry = f"{datetime.now()} - File: {file_path} - Link: {download_link}\n"
            with open(LOG_FILE, "a") as log:
                log.write(log_entry)
        else:
            raise Exception(f"Error {response.status_code}: {response.text}")
    except Exception as e:
        console.print(Panel.fit(
            f"[red]{LANGUAGES[language]['upload_error']} {e}[/red]",
            title="Error", box=ROUNDED
        ))
    Prompt.ask(f"\n{LANGUAGES[language]['press_enter']}")

def show_logs(language):
    """Exibe o hist√≥rico de uploads."""
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r") as log:
            logs = log.readlines()
            if logs:
                table = Table(title=LANGUAGES[language]["history_title"], show_header=True, header_style="bold magenta", box=ROUNDED)
                table.add_column("Date and Time", style="dim")
                table.add_column("File")
                table.add_column("Link")
                for entry in logs:
                    parts = entry.strip().split(" - ")
                    if len(parts) == 3:
                        table.add_row(parts[0], parts[1], parts[2])
                console.print(table)
            else:
                console.print(Panel.fit(
                    f"[yellow]{LANGUAGES[language]['no_records']}[/yellow]",
                    title="Warning", box=ROUNDED
                ))
    else:
        console.print(Panel.fit(
            f"[yellow]{LANGUAGES[language]['no_records']}[/yellow]",
            title="Warning", box=ROUNDED
        ))
    Prompt.ask(f"\n{LANGUAGES[language]['press_enter']}")

def clear_logs(language):
    """Limpa o hist√≥rico de uploads."""
    if os.path.exists(LOG_FILE):
        os.remove(LOG_FILE)
        console.print(Panel.fit(
            f"[green]{LANGUAGES[language]['history_cleared']}[/green]",
            title="Success", box=ROUNDED
        ))
    else:
        console.print(Panel.fit(
            f"[yellow]{LANGUAGES[language]['no_records']}[/yellow]",
            title="Warning", box=ROUNDED
        ))
    Prompt.ask(f"\n{LANGUAGES[language]['press_enter']}")

def select_language():
    """Permite ao usu√°rio selecionar o idioma."""
    console.clear()
    console.print(Panel.fit("[bold]üåç Select your language[/bold]", box=ROUNDED))
    console.print("[bold]1. English[/bold]")
    console.print("[bold]2. Portuguese[/bold]")
    console.print("[bold]3. Spanish[/bold]")
    console.print("[bold]4. Russian[/bold]")
    console.print("[bold]5. Ukrainian[/bold]")
    
    choice = Prompt.ask("Choose an option", choices=["1", "2", "3", "4", "5"])
    
    # Define o idioma com base na escolha do usu√°rio
    if choice == "1":
        return "English"
    elif choice == "2":
        return "Portuguese"
    elif choice == "3":
        return "Spanish"
    elif choice == "4":
        return "Russian"
    elif choice == "5":
        return "Ukrainian"

def main_menu():
    """Exibe o menu principal."""
    language = select_language()
    
    while True:
        console.clear()
        console.print(AUPLOADER_ASCII, justify="center")
        console.print(BY_MESSAGE, justify="center")
        console.print(f"\n[bold cyan]{LANGUAGES[language]['menu_title']}[/bold cyan]", justify="center")
        for i, option in enumerate(LANGUAGES[language]["menu_options"], start=1):
            console.print(f"[bold]{i}. {option}[/bold]")
        
        choice = Prompt.ask("Choose an option", choices=["1", "2", "3", "4"])

        if choice == "1":
            file_path = Prompt.ask(LANGUAGES[language]["enter_file_path"])
            if os.path.exists(file_path):
                upload_file(file_path, language)
            else:
                console.print(Panel.fit(
                    f"[red]{LANGUAGES[language]['file_not_found']}[/red]",
                    title="Error", box=ROUNDED
                ))
                Prompt.ask(f"\n{LANGUAGES[language]['press_enter']}")
        elif choice == "2":
            show_logs(language)
        elif choice == "3":
            clear_logs(language)
        elif choice == "4":
            console.print(Panel.fit(
                f"[bold magenta]{LANGUAGES[language]['exiting']}[/bold magenta]",
                title="AUploader", box=ROUNDED
            ))
            break

if __name__ == "__main__":
    main_menu()
